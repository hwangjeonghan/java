package com.ohgiraffers.section01.extend;

public class Application01 {
    public static void main(String[] args) {
        
        /*
        * 상속
        * 상속(interitance)은 현실 세계의 상속과 비슷한 개념이다
        * 부모가 가지고있는 재산(자바에서는 클래스가 가지는 맴버)를 자식이 물려받는 의미이다
        * 클랴스 도한 부모클래스와 자식클래스로 역할을 나누어서 부모가 가지는 맴버를 자식이 물려받아
        * 자기 맴버인 것 처럼 사용 할수 있도록 만든 기술이다.
        * 
        * 하지만 단순 물려받는 개념보다는 조금 더 나아간다면
        * 자바에서의 상속은 부모클래스의 확장(extend) 의 개념을 가진다
        * 물려받아서 자신의 것 처럼 사용하는 것 뿐 아니라 추가적인 맴버도 작성이 가능하다
        * 
        * 메소드재정의(ovveriding)이란 무고가 가지는 메소드 선언부를 그대로 사용하면서
        * 자식클래스가 정의한 메소드대로 동작하도록 구현 몸체 부분을 새롭게 다시 작성하는 기술이다
        * 메소드 재정의를 하면 메소드를 호출 할 시 재정의한 메소드가 우선으로 작동하게 된다
        * 
        * 이러한 상속이라는 기술을 사용하게 되면 얻게 되는 이점은 크게 두가지로 볼수 있다
        * 1.새로운 클래스를 작성할 시 기존에 작성한 클래스를 재 사용 할 수있다
        * 1-1/재사용시 생산성을 크게 향상 시클수있다(새롭게 작성하는거보다 빠르다)
        * 1-2 공동적으로 사용하는 코드가 부모클래스에 존재하면 수정사항이 생길시 부모 클래스만 수정해도
        * 전체적으로 적용된다(유지도보수성 증가)
        * 2클래스간의 계층관계가 형성 되며 다형성의 문법적인 토대가 된다.
        * 
        * 하지만 상속으로 인ㅇ한 단점도 존재한다
        * 1.부모 클래스의 기능을 추가/변경할 시 자식 클래스가 정상적으로 작동하는지에 대한 예측이 힘들다
        * 상속 구조가 복잡해질수록 그 영향에 대한 예측이 힘들며 이러한 단점이 유지보수성 증가한다는 장점과는
        * 바낻로 유지보수에 악영향을 미친다
        * 2. 또한 부모클래스의 변경 또한 쉽지않다, 자식 클래스에서 중요하게 사용하는 기능인경우
        * 부모클래스 변경할 시 자식 클랴스에 모두 영향을 줄 수있다
        * 역시 유지보수에 악영향을 미친다
        * 3.부모 클래스에서는 의미있었던 기능이자식 클래스에서는 무의미할수도있다
        * 
        * 장점과 단점을 고려했을떄
        * 상속은 재사용이라는 장점만 바라보게 되면 오용의 가능성이있기 떄믄에 유지보수에 좋지않는 코드를 작성할
        * 상속은 IS-A관계로 구분되는 경우에만 사용해야 한다.
        * 
        * 객체지향 설계 관점에서 바라보는 상속
        * 모든 객체는 자신이 수신한 메세지에 대해 응답을 해야하는 책임을 가지며 그 책임의 규모는 적절해야한다
        * 적절한 책임을 가진 객체들이 서로협력( 메세지 수신과 응답) 을 통해 프로그램이 동작하는것이 객체지향 프로그램이다
        * 
        * 적절한 책임을 수행하는 객체 또한 그 객체만 수행 할 수있는 기능이라기 보다 역할의 관점으로 바라봐야한다
        * 역할이란 동일한동작을수행하는것을 정의한 것이며 대체가능성을의미한다
        * 부모클래스를 추상화하는경우에 역할의 관점으로 바라봐야한다
        * 그래야 자시클래스로 생성한객체들이 서로역할을 수행해가며 유연한 코드를 작성 할 수있게 된다
        * 동일한 역할을 가지는 모든 객체는 동일한 메세지를 수신하기는 하지만
        * 객체별로 그 메세지에 응답하는 방식은 서로 다를수있다.(다형성)
        * */

        Car car = new Car();
        car.soundhorn();
        car.run();
        car.soundhorn();
        car.stop();
        car.soundhorn();

        System.out.println("==========");

        FireCar firecar = new FireCar();

        firecar.soundhorn();
        firecar.run();
        firecar.soundhorn();
        firecar.stop();
        firecar.soundhorn();
        firecar.spraywarter();

    }
}
